import codecademylib3_seaborn
from sklearn.linear_model import Perceptron
import matplotlib.pyplot as plt
import numpy as np
from itertools import product

data = [[0, 0], [0, 1], [1, 0], [1, 1]]

#AND gate
labels = [0, 0, 0, 1]
#plt.scatter([point[0] for point in data], [point[1] for point in data] , c = labels)
#plt.show()

classifier = Perceptron(max_iter = 40)
classifier.fit(data, labels)
print(classifier.score(data, labels))

#XOR gate
labels_xor = [0, 1, 1, 0]
#plt.scatter([point[0] for point in data], [point[1] for point in data] , c = labels_xor)
#plt.show()

classifier_xor = Perceptron(max_iter = 40)
classifier_xor.fit(data, labels_xor)
print(classifier_xor.score(data, labels_xor))

#OR gate
labels_or = [0, 1, 1, 1]
#plt.scatter([point[0] for point in data], [point[1] for point in data] , c = labels_or)
#plt.show()

classifier_or = Perceptron(max_iter = 40)
classifier_or.fit(data, labels_or)
print(classifier_or.score(data, labels_or))

#decision boundary
print(classifier.decision_function([[0, 0], [1, 1], [0.5, 0.5]]))
#heatmap revealing decision boudary:
x_values = np.linspace(0, 1, 100)
y_values = np.linspace(0, 1, 100)
#creating every possible combination of x and y
point_grid = list(product(x_values, y_values))
distances = classifier.decision_function(point_grid)
abs_distances = [abs(pt) for pt in distances]
#converting distances from one-dimensional array of 10000 numbers to two-dimensional array 100x100 numbers
distances_matrix = np.reshape(abs_distances, (100, 100))
#drawing heatmap
heatmap = plt.pcolormesh(x_values, y_values, distances_matrix)
plt.colorbar(heatmap)
plt.show()
